package br.com.ibebidas.resource;

import java.util.List;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import com.google.inject.Inject;
import com.google.inject.persist.Transactional;

import br.com.ibebidas.config.Constantes;
import br.com.ibebidas.entity.Produto;
import br.com.ibebidas.service.ProdutoService;

@Path(value = "/produto")
@Produces("application/json; charset=UTF-8")
public class ProdutoResource {

	@Inject
	private ProdutoService produtoService;
	/* @Inject private ParceiroService parceiroService; */

	@GET
	@Transactional
	public List<Produto> getProduto() {

		try {
			return produtoService.findAll();

		} catch (Exception e) {
			Response response = Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
			throw new WebApplicationException(response);
		}

	}

	@GET
	@Transactional
	@Path("{id}")
	public Produto getProduto(@PathParam("id") Long id) {

		try {
			return produtoService.findById(id);
		} catch (Exception e) {
			Response response = Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
			throw new WebApplicationException(response);
		}

	}

	@DELETE
	@Transactional
	@Path(value = "{id}")
	public Response remover(@PathParam("id") Long id) {

		try {
			produtoService.deleteById(id);
			return Response.ok(new Object() {
				@SuppressWarnings("unused")
				public String msg = Constantes.REGISTRO_REMOVIDO_SUCESSSO;
				@SuppressWarnings("unused")
				public int status = Response.Status.OK.getStatusCode();
			}).build();

		} catch (Exception e) {
			ResponseBuilder rb = Response.status(Response.Status.BAD_REQUEST.getStatusCode());
			rb = rb.entity(new Object() {
				@SuppressWarnings("unused")
				public String msg = Constantes.REGISTRO_POSSUI_DEPENDENCIAS;
			});
			return rb.build();
		}
	}

	@POST
	@Transactional
	public Produto salvarProduto(Produto produto) {
		try {

			/*
			 * Parceiro parceiro = new Parceiro();
			 * parceiro.setId(parceiroService.getUsuarioLogado().getId());
			 * produto.setParceiro(parceiro);
			 */

			return produtoService.saveOrUpdate(produto);
		} catch (Exception e) {
			Response response = Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
			throw new WebApplicationException(response);
		}
	}



}
