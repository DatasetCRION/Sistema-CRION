package br.com.ibebidas.resource;

import java.util.Date;
import java.util.List;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import com.google.inject.Inject;
import com.google.inject.persist.Transactional;

import br.com.ibebidas.config.Constantes;
import br.com.ibebidas.entity.Preco;
import br.com.ibebidas.entity.ProdutoParceiro;
import br.com.ibebidas.service.PrecoService;
import br.com.ibebidas.service.ProdutoParceiroService;

@Path(value = "/preco")
@Produces("application/json; charset=UTF-8")
public class PrecoResource {

    @Inject
    private PrecoService precoService;
    @Inject
    private ProdutoParceiroService produtoParceiroService;

    @GET
    @Transactional
    public List<Preco> getPreco() {

        try {
            return precoService.findAll();

        } catch (Exception e) {
            Response response = Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
            throw new WebApplicationException(response);
        }

    }

    @GET
    @Transactional
    @Path("{id}")
    public Preco getPreco(@PathParam("id") Long id) {

        try {
            return precoService.findById(id);
        } catch (Exception e) {
            Response response = Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
            throw new WebApplicationException(response);
        }

    }

    @DELETE
    @Transactional
    @Path(value = "{id}")
    public Response remover(@PathParam("id") Long id) {

        try {
            precoService.deleteById(id);
            return Response.ok(new Object() {
                @SuppressWarnings("unused")
                public String msg = Constantes.REGISTRO_REMOVIDO_SUCESSSO;
                @SuppressWarnings("unused")
                public int status = Response.Status.OK.getStatusCode();
            }).build();

        } catch (Exception e) {
            ResponseBuilder rb = Response.status(Response.Status.BAD_REQUEST.getStatusCode());
            rb = rb.entity(new Object() {
                @SuppressWarnings("unused")
                public String msg = Constantes.REGISTRO_POSSUI_DEPENDENCIAS;
            });
            return rb.build();
        }
    }

    @POST
    @Transactional
    public Preco salvarPreco(Preco preco) {
        try {
            ProdutoParceiro produtoParceiro = produtoParceiroService.findById(preco.getProdutoParceiro().getId());
            produtoParceiro.setAtivarPromocional(preco.getAtivarPromocional());
            produtoParceiro.setPreco(preco.getPreco());
            produtoParceiro.setPrecoPromocional(preco.getPrecoPromocional());
            //produtoParceiroService.saveOrUpdate(produtoParceiro);
            preco.setProdutoParceiro(produtoParceiro);
            if(preco.getId() != null){
                Preco oldPreco = precoService.findById(preco.getId());
                if(oldPreco.getPreco() != preco.getPreco()){
                     preco.setId(null);
                }
            }
            preco.setAtualizacao(new Date());
            return precoService.saveOrUpdate(preco);
        } catch (Exception e) {
            Response response = Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
            throw new WebApplicationException(response);
        }
    }

}
